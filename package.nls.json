{
  "markdown-image.title": "Markdown Image",
  "markdown-image.local": "Local",
  "markdown-image.qiniu": "Qiniu",
  "markdown-image.upyun": "Upyun",
  "markdown-image.DIY": "DIY",
  "markdown-image.Cloudinary": "Cloudinary",
  "markdown-image.Cloudflare": "Cloudflare",
  "markdown-image.command.paste": "Paste Image",
  "markdown-image.command.config": "Markdown Image Config Setting",
  "markdown-image.command.paste-rich-text": "Paste Rich Text (Beta)",
  "markdown-image.base.uploadMethod": "Method to upload pictures. To the local or another picture CDN service.\n\n- Local [Options](#markdown-image.local.path)\n\n- GitHub [Options](#markdown-image.github.branch)\n\n- Imgur [Options](#markdown-image.imgur.clientId)\n\n- SM.MS [Options](#markdown-image.imgur.clientId)\n\n- Qiniu [Options](#markdown-image.qiniu.accessKey)\n\n- Upyun [Options](#markdown-image.upyun.bucket)\n\n- DIY [Options](#markdown-image.DIY.path)\n\n- Cloudinary [Options](#markdown-image.cloudinary.apiKey)\n\n- Cloudflare [Options](#markdown-image.cloudflare.accountId)",
  "markdown-image.base.uploadMethod.Local": "Upload the image to the project directory. You can use markdown-image.local.path sets the relative path for upload.",
  "markdown-image.base.uploadMethod.Coding": "Upload the image to git repository in Coding.net . You can configure the repository through markdown-image.coding.repository. You need to configure the Token to access the repository through markdown-image.coding.token.",
  "markdown-image.base.uploadMethod.GitHub": "Upload the image to git repository in GitHub.com . You can configure the repository through markdown-image.github.repository. You need to configure the Token to access the repository through markdown-image.github.token.",
  "markdown-image.base.uploadMethod.Imgur": "Upload the image to Imgur. You can configure `Client Id` through markdown-image.imgur.clientId.",
  "markdown-image.base.uploadMethod.SM.MS": "Upload the image to sm.ms. You can configure `Token` through markdown-image.sm_ms.token if you have an account.",
  "markdown-image.base.uploadMethod.DataURL": "Turn the picture into the DATA URL insert.",
  "markdown-image.base.uploadMethod.Qiniu": "Upload the image to qiniu.com.",
  "markdown-image.base.uploadMethod.Upyun": "Upload the image to upyun.com.",
  "markdown-image.base.uploadMethod.DIY": "You can define your code used to upload. You need to configure the code path through markdown-image.DIY.path",
  "markdown-image.base.uploadMethod.Cloudinary": "Upload the image to Cloudinary. You can configure `Cloud Name` through markdown-image.cloudinary.cloudName.",
  "markdown-image.base.uploadMethod.S3": "Upload the image to any S3 API compatible server, for example, AWS S3, MinIO, Backblaze B2, etc.",
  "markdown-image.base.uploadMethod.Cloudflare": "Upload the image to Cloudflare Image. You can configure `accountId` through markdown-image.cloudflare.accountId.",
  "markdown-image.base.fileNameFormat": "The filenname and path format string for upload. Not Support in `Imgur` and `SM.MS`. You can use some variables: \n\n- `${filename}`: The original filename.  \n- `${mdname}`: The name of the Markdown file being edited.  \n- `${path}`: The path of the Markdown file being edited relative to the root directory.  \n- `${hash}`: The sha256 hash of image.  \n- `${timestamp}`: The timestamp of upload time.  \n- `${YY}`: The Year  \n- `${MM}`:The Month  \n- `${DD}`: The Day  \n- `${hh}`: The 12-hour clock  \n- `${HH}`: The 24-hour clock  \n- `${mm}`: The minutes  \n- `${ss}`: The seconds  \n- `${mss}`: The milliseconds  \n- `${rand,number}`: A random number, for example: `${rand,100}`. It will generate random numbers from 0 to 99 \n- `${prompt}`: Makes it possible to enter a custom name through an input prompt when pasting the image.",
  "markdown-image.base.urlEncode": "Whether URL encode for the url of image.",
  "markdown-image.base.codeType": "The type of image code",
  "markdown-image.base.codeType.Markdown": "Markdown Code as: ![image](./image/file/path.jpg)",
  "markdown-image.base.codeType.HTML": "HTML Code as: <img alt=\"image\" src=\"./image/file/path.jpg\" />",
  "markdown-image.base.imageWidth": "The maximum width of the image, if the image is greater than this width, the width is set to this value. Set to 0 means not change.",
  "markdown-image.local.path": "Picture storage directory that in the local (automatically created if it does not exist). Notice: You can't use variable in here. You can use variable in `#markdown-image.base.fileNameFormat#`.",
  "markdown-image.local.referencePath": "The reference path format in markdown(not include file name). Empty means use relative path. You can use variable of `#markdown-image.base.fileNameFormat#` in here. For example: `/images/${YY}-${MM}/`",
  "markdown-image.coding.path": "Picture upload directory that in the repository (automatically created if it does not exist). The repository must initialization first.",
  "markdown-image.coding.token": "Coding person [access token](https://help.coding.net/docs/member/tokens.html).",
  "markdown-image.coding.repository": "Coding repository, for example: `https://coding-demo.coding.net/p/coding-demo/d/coding-demo/git`",
  "markdown-image.github.path": "Picture upload directory that in the repository (automatically created if it does not exist). The repository must initialization first.",
  "markdown-image.github.token": "GitHub person [access token](https://github.com/settings/tokens).",
  "markdown-image.github.repository": "GitHub repository, for example: `https://github.com/username/repository`",
  "markdown-image.github.branch": "GitHub repository branch to save.",
  "markdown-image.github.cdn": "The github cdn address format to be used, `${username}` is the username of `#markdown-image.github.repository#`, and `${repository}` is the repository name. `${branch}` is the value of `#markdown-image.github.branch#`. `${filepath}` is the upload path in repository.",
  "markdown-image.imgur.clientId": "The client id registered with imgur. You can registed it at [here](https://api.imgur.com/oauth2/addclient).",
  "markdown-image.imgur.httpProxy": "Connect to Imgur via http proxy.",
  "markdown-image.sm_ms.token": "SM.MS API token (Options). You can register an account and then visit [API Token](https://sm.ms/home/apitoken) Page to generate secret token.",
  "markdown-image.qiniu.accessKey": "AccessKey of upload.",
  "markdown-image.qiniu.secretKey": "SecretKey of upload",
  "markdown-image.qiniu.bucket": "Storge name of upload",
  "markdown-image.qiniu.domain": "Domain bind with storge name",
  "markdown-image.qiniu.zone": "Zone of storge",
  "markdown-image.qiniu.east": "East China",
  "markdown-image.qiniu.north": "North China",
  "markdown-image.qiniu.south": "South China",
  "markdown-image.qiniu.na": "North America",
  "markdown-image.qiniu.sa": "Southeast Asia",
  "markdown-image.upyun.bucket": "Storge name of upload",
  "markdown-image.upyun.domain": "Domain bind with storge name",
  "markdown-image.upyun.operator": "Operator of upyun",
  "markdown-image.upyun.password": "Password of upyun operator",
  "markdown-image.upyun.path": "The path that img store",
  "markdown-image.upyun.link": "The link that connect to upyun",
  "markdown-image.upyun.smart": "Smart choose: v0.api.upyun.com",
  "markdown-image.upyun.telecom": "China Telecom: v1.api.upyun.com",
  "markdown-image.upyun.unicom": "China Unicom: v2.api.upyun.com",
  "markdown-image.upyun.mobile": "China Mobile: v3.api.upyun.com",
  "markdown-image.DIY.path": "The Code File Path. You can write a Node.js code file to upload, and fill in the file path to here. Your code must exports a function as `async function (filePath:string, savePath:string, markdownPath:string):string`.\n\nFor example: \n\n ```javascript\nconst path = require('path');\nmodule.exports = async function(filePath, savePath, markdownPath) {\n\t// Return a picture access link\n\treturn path.relative(path.dirname(markdownPath), filePath); \n}\n```\nThe arguments are :\n- `filePath`: The absolute path of the file.  \n- `savePath`: The path of the saved file generate according to `#markdown-image.base.fileNameFormat#`.  \n- `markdownPath`: The path of markdown file being edited.",
  "markdown-image.cloudinary.cloudName": "Your user account name.",
  "markdown-image.cloudinary.apiKey": "API key for your account.",
  "markdown-image.cloudinary.apiSecret": "API secret for your account.",
  "markdown-image.cloudinary.folder": "Folder to upload the image to.",
  "markdown-image.cloudflare.accountId": "Your Cloudflare account ID.",
  "markdown-image.cloudflare.apiToken": "You Clouflare Image API token.",
  "markdown-image.s3.endpoint": "Your S3 API endpoint obtained from bucket setting or dashboard. It should include protocol as well, e.g. `http/https`.",
  "markdown-image.s3.region": "Your S3 bucket region obtained from the bucket setting.",
  "markdown-image.s3.bucketName": "Your S3 bucket name.",
  "markdown-image.s3.accessKeyId": "Your S3 access key ID.",
  "markdown-image.s3.secretAccessKey": "Your S3 secret access key."
}